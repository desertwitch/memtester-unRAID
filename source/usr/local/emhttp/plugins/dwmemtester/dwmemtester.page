Menu="Utilities"
Type="xmenu"
Title="Memory Tester"
Icon="microchip"
Tag="microchip"
Markdown="false"
---
<?
function humanFileSize($sizeObj,$unit="") {
    try {
        $size = intval($sizeObj);
        if($size) {
            if( (!$unit && $size >= 1<<40) || $unit == "TB")
                return number_format($size/(1<<40),2)." TB";
            if( (!$unit && $size >= 1<<30) || $unit == "GB")
                return number_format($size/(1<<30),2)." GB";
            if( (!$unit && $size >= 1<<20) || $unit == "MB")
                return number_format($size/(1<<20),2)." MB";
            if( (!$unit && $size >= 1<<10) || $unit == "KB")
                return number_format($size/(1<<10),2)." KB";
            return number_format($size)." B";
        } else {
            return "-";
        }
    } catch (Throwable $e) { // For PHP 7
        return "-";
    } catch (Exception $e) { // For PHP 5
        return "-";
    }
}

$memlaststart = trim(file_exists("/var/lib/memtester/laststart") ? htmlspecialchars(file_get_contents("/var/lib/memtester/laststart")) : "-");
$memlastfinish = trim(file_exists("/var/lib/memtester/lastfinish") ? htmlspecialchars(file_get_contents("/var/lib/memtester/lastfinish")) : "-");
$memlog_size = trim(file_exists("/var/lib/memtester/log") ? htmlspecialchars(humanFileSize(filesize("/var/lib/memtester/log"))) : "-");
$errlog_size = trim(file_exists("/var/lib/memtester/errlog") ? htmlspecialchars(humanFileSize(filesize("/var/lib/memtester/errlog"))) : "-");

$mem_highram_html = "";
$mem_disk_util = trim(htmlspecialchars(shell_exec("df --output=pcent /var/lib/memtester 2>/dev/null | tr -dc '0-9' 2>/dev/null") ?? "-"));
if($mem_disk_util !== "-") {
    $mem_highram_html = ($mem_disk_util < 90) ? "" : "<span style='margin-right:10px;color:red;'><i class='fa fa-exclamation-triangle'></i> <strong>RAM Disk > 90% (No More Output Possible)</strong></span>";
}

?>

<style type="text/css">
.memlog {
    height: 450px;
    max-height: 450px;
    width: 100%;
    max-width: 100%;
    overflow: auto;
    word-break: normal !important;
    word-wrap: normal !important;
    white-space: pre !important;
}
.errlog {
    height: 450px;
    max-height: 450px;
    width: 100%;
    max-width: 100%;
    overflow: auto;
    word-break: normal !important;
    word-wrap: normal !important;
    white-space: pre !important;
}
.logtable {
    table-layout: fixed;
}
</style>

<table class="tablesorter shift logtable" autofocus>
<thead>
<tr>
<th><i id="memstatusicon" class="fa fa-cog fa-spin" style="display:none;"></i> <strong>Operation Screen</strong></th>
<th style="text-transform: none;"><span style="float:right;"><strong>Started:</strong> <em><?=$memlaststart?></em></span></th>
<th style="text-transform: none;"><strong>Finished:</strong> <em><?=$memlastfinish?></em></th>
<th style="text-transform: none;"><span style="float:right;"><strong>Refresh Output:</strong> <i id="memlogcontrol" class="fa fa-refresh fa-spin"></i></span></th>
</tr>
<tr>
<th><strong>SUMMARY OUTPUT (STDOUT)</strong></th>
<th style="text-transform: none;"><span style="float:right;"><?=$mem_highram_html;?><strong>File Size:</strong> <span id="memsumsize"><?=$memlog_size;?></span></span></th>
<th><strong>DETAILED ERROR OUTPUT (STDERR)</strong></th>
<th style="text-transform: none;"><span style="float:right;"><?=$mem_highram_html;?><strong>File Size:</strong> <span id="memerrsize"><?=$errlog_size;?></span></span></th>
</tr>
<tbody>
<tr>
<td colspan="2"><span id="memlogviewer"><div style="text-align:center;"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em><br><em>Note: If this panel does not load, there's too many lines to display.</em></div></span></td>
<td colspan="2"><span id="errlogviewer"><div style="text-align:center;"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em><br><em>Note: If this panel does not load, there's too many lines to display.</em></div></span></td>
</tr>
</tbody>
</table>

<form markdown="0" id="memcommands" name="memcommands" method="POST" action="/update.php" target="progressFrame">
    <input type="hidden" id="memcommand" name="#command" value="/usr/local/emhttp/plugins/dwmemtester/scripts/start">
    <input type="hidden" id="arg1" name="#arg[1]" value="0">
    <input type="hidden" id="arg2" name="#arg[2]" value="">
    <input type="hidden" id="arg3" name="#arg[3]" value="">
    <input type="hidden" id="arg4" name="#arg[4]" value="">
    <input type="hidden" id="arg5" name="#arg[5]" value="">

    <input type="text" class="narrow memrun" id="memsize" name="#arg[6]" placeholder="<memory>[B|K|M|G]" value="">
    <input type="text" class="narrow memrun" id="memloops" name="#arg[7]" placeholder="(optional) loops" value="">
    <input type="button" class="memrun" id="memstart" value="Start Operation">
    <input type="text" class="memrun" id="memhex" placeholder="(optional) hex starting point" value="">
    <input type="text" class="memrun" id="memtarget" placeholder="(optional) target device" value="">

    <span style="float:right;">
        <input type="button" class="memrun" id="memclear" value="Clear Logs">
        <input type="button" class="memnotrun" id="memstop" value="Stop Operation">
        <input type="button" class="memnotrun" id="memkill" value="Kill Operation">
    </span><br>

    <input type="checkbox" id="memerrs" value="memerrs">
    <label for="memerrs">Write Detailed Error Output (<strong>Not Recommended</strong> - Recording Huge Amounts of Errors May Exceed Available RAM)</label>   

</form>

<script type="text/javascript">
function getMemLogs() {
    $.get('/plugins/dwmemtester/include/dwmemtester_log.php', function(data) {
        if (data) { 
            $('#memlogviewer').html(data); 
	        var pre = $(".memlog");
	        pre.scrollTop(pre.prop("scrollHeight"));
	    }
    });
    clearTimeout(timers.getMemLogs);
    timers.getMemLogs = setTimeout(getMemLogs, 1000);
}
function getErrLogs() {
    $.get('/plugins/dwmemtester/include/dwmemtester_errlog.php', function(data) {
        if (data) { 
            $('#errlogviewer').html(data); 
	        var pre2 = $(".errlog");
	        pre2.scrollTop(pre2.prop("scrollHeight"));
	    }
    });
    clearTimeout(timers.getErrLogs);
    timers.getErrLogs = setTimeout(getErrLogs, 1000);
}
function getMemStatus() {
    $.get('/plugins/dwmemtester/include/dwmemtester_status.php', {"getfs": "yes"}, function(data) {
        if (data) {
            var splitData = data.split(",");
            if(splitData[0]) {
                if(splitData[0] === "RUNNING:YES") {
                    $('#memstatusicon').show();
                    $('.memrun').prop('disabled', true);
                    $('.memnotrun').prop('disabled', false);
                } else if (splitData[0] === "RUNNING:NO") {
                    if($('#memstatusicon').is(":visible")) {
                        location = '/Settings/dwmemtester';
                    }
                    $('#memstatusicon').hide();
                    $('.memrun').prop('disabled', false);
                    $('.memnotrun').prop('disabled', true);
                    $('#memlogcontrol').attr("class", "fa fa-refresh");
                    clearTimeout(timers.getMemLogs);
                    clearTimeout(timers.getErrLogs);
                }
            }
            if(splitData[1]) {
                $('#memsumsize').html(splitData[1]);
            }
            if(splitData[2]) {
                $('#memerrsize').html(splitData[2]);
            }
	    }
    });
    clearTimeout(timers.getMemStatus);
    timers.getMemStatus = setTimeout(getMemStatus, 3000);
}
function toggleMemLogs() {
    if($('#memlogcontrol').attr("class") == "fa fa-refresh fa-spin") {
        $('#memlogcontrol').attr("class", "fa fa-refresh");
        clearTimeout(timers.getMemLogs);
        clearTimeout(timers.getErrLogs);
    } else {
        $('#memlogcontrol').attr("class", "fa fa-refresh fa-spin");
        getMemLogs();
        getErrLogs();
    }
}
$(function()
{
    $('#memstart').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/start');
        if($('#memerrs').is(':checked')) {
            $('#arg1').val('1');
        }
        if($('#memhex').val()) {
            $('#arg2').val('-p');
            $('#arg3').val($('#memhex').val());
        }
        if($('#memtarget').val()) {
            $('#arg4').val('-d');
            $('#arg5').val($('#memtarget').val());
        }
        $('#memcommands').submit();
    });
    $('#memclear').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/clear');
        $('#memcommands').submit();
    });
    $('#memstop').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/stop');
        $('#memcommands').submit();
    });
    $('#memkill').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/kill');
        $('#memcommands').submit();
    });
    $('#memlogcontrol').click(toggleMemLogs);
    getMemStatus()
    getMemLogs();
    getErrLogs();
});
</script>
