Menu="Utilities"
Type="xmenu"
Title="Live Memory Tester"
Icon="microchip"
Tag="microchip"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright desertwitch (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
require_once '/usr/local/emhttp/plugins/dwmemtester/include/dwmemtester_helpers.php';

$mem_laststart = trim(file_exists("/var/lib/memtester/laststart") ? htmlspecialchars(file_get_contents("/var/lib/memtester/laststart")) : "-");
$mem_lastfinish = trim(file_exists("/var/lib/memtester/lastfinish") ? htmlspecialchars(file_get_contents("/var/lib/memtester/lastfinish")) : "-");
$mem_log_size = trim(file_exists("/var/lib/memtester/log") ? htmlspecialchars(humanFileSize(filesize("/var/lib/memtester/log"))) : "-");
$mem_errlog_size = trim(file_exists("/var/lib/memtester/errlog") ? htmlspecialchars(humanFileSize(filesize("/var/lib/memtester/errlog"))) : "-");
?>

<style type="text/css">
.memlog {
    height: 400px;
    max-height: 400px;
    width: 100%;
    max-width: 100%;
    overflow: auto;
    word-break: normal !important;
    word-wrap: normal !important;
    white-space: pre !important;
}
.memerrlog {
    height: 400px;
    max-height: 400px;
    width: 100%;
    max-width: 100%;
    overflow: auto;
    word-break: normal !important;
    word-wrap: normal !important;
    white-space: pre !important;
}
.logtable {
    table-layout: fixed;
}
.memicon {
  font-size: 1.6rem;
  margin-right: 4px;
  vertical-align: middle;
}
</style>

<table class="tablesorter shift logtable" autofocus>
<thead>
<tr>
<th><i id="memstatusicon" class="fa fa-cog fa-spin" style="display:none;"></i> <strong>Operation Screen</strong></th>
<th style="text-transform: none;"><span style="float:right;"><strong>Started:</strong> <em><?=$mem_laststart?></em></span></th>
<th style="text-transform: none;"><strong>Finished:</strong> <em><?=$mem_lastfinish?></em></th>
<th style="text-transform: none;"><span style="float:right;"><strong>Refresh:</strong> <i id="memlogcontrol" class="fa fa-refresh fa-spin"></i></span></th>
</tr>
<tr>
<th><strong>SUMMARY STANDARD OUTPUT (STDOUT)</strong></th>
<th style="text-transform: none;"><span style="float:right;"><span class="memramwarning memramtip" style="margin-right:10px;color:red;display:none" title="It is recommended to stop the running memory test and to clear the logs. In case of too many errors being recorded, you can disable writing the detailed error output (for just the testing summaries) next time."><i class="fa fa-exclamation-triangle"></i> <strong>RAM Disk Utilization > 90% (No More Output Possible)</strong></span><strong>File Size:</strong> <span id="memsumsize"><?=$mem_log_size;?></span></span></th>
<th><strong>DETAILED ERROR OUTPUT (STDERR)</strong></th>
<th style="text-transform: none;"><span style="float:right;"><span class="memramwarning memramtip" style="margin-right:10px;color:red;display:none" title="It is recommended to stop the running memory test and to clear the logs. In case of too many errors being recorded, you can disable writing the detailed error output (for just the testing summaries) next time."><i class="fa fa-exclamation-triangle"></i> <strong>RAM Disk Utilization > 90% (No More Output Possible)</strong></span><strong>File Size:</strong> <span id="memerrsize"><?=$mem_errlog_size;?></span></span></th>
</tr>
</thead>
<tbody>
<tr>
<td colspan="2"><span id="memlogviewer"><div style="text-align:center;"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em><br><em>Note: If this panel does not load, there's too many lines to display.</em></div></span></td>
<td colspan="2"><span id="memerrlogviewer"><div style="text-align:center;"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em><br><em>Note: If this panel does not load, there's too many lines to display.</em></div></span></td>
</tr>
</tbody>
</table>

<form markdown="0" id="memcommands" name="memcommands" method="POST" action="/update.php" target="progressFrame">
    <input type="hidden" id="memcommand" name="#command" value="/usr/local/emhttp/plugins/dwmemtester/scripts/none">
    <input type="hidden" id="arg1" name="#arg[1]" value="0">
    <input type="hidden" id="arg2" name="#arg[2]" value="0">
    <input type="hidden" id="arg3" name="#arg[3]" value="">
    <input type="hidden" id="arg4" name="#arg[4]" value="">
    <input type="hidden" id="arg5" name="#arg[5]" value="">
    <input type="hidden" id="arg6" name="#arg[6]" value="">

    
    <input type="text" title="The amount of memory to test (e.g. 5G). A number without a unit is assumed as MB. When selecting the amount of memory to test, please consider leaving some memory for the operating system to still function." class="memtip narrow memrun" id="memsize" name="#arg[7]" placeholder="<memory>[B|K|M|G]" value="">
    <span>&#91;</span>
    <input type="text" title="The amount of loops the memory testing should run for, it will continue indefinitely if none are specified (until stopped)." class="memtip narrow memrun" style="margin:0 0 0 0;" id="memloops" name="#arg[8]" placeholder="(optional) loops" value="">
    <span style="margin-right:10px;">&#93;</span>
    <input type="button" class="memrun" id="memstart" value="Start Operation">
    <span style="color:red;"><strong>Dangerous:</strong></span> <span>&#91;</span>
    <input type="text" title="Selects a specific region of memory starting at physical address PHYSADDR (given in hex), by mmap-ing the target device. This is mostly of use to hardware developers, for testing memory-mapped I/O devices and similar. Note that the memory region will be overwritten during testing, so it is not safe to specify memory which is allocated for the system or for other applications; doing so will cause them to crash. If you absolutely must test a particular region of actual physical memory, arrange to have that memory allocated by your test software, and hold it in this allocated state, then run the tester after." class="memtip memrun" style="margin:0 0 0 0;" id="memhex" placeholder="(optional) hex starting point" value="">
    <span>&amp;</span>
    <input type="text" title="Selects a target memory device, expects a device path (e.g. /dev/mem). A specific region must also be selected, but read the warning text of the starting point option first." class="memtip memrun" style="margin:0 0 0 0;" id="memtarget" placeholder="(optional) target device" value="">
    <span>&#93;</span>
    <span style="margin-left:5px;margin-right:10px;" title="Memtester's User Manual" class="memtip" ><a href="https://linux.die.net/man/8/memtester" target="_blank"><i class="fa fa-question-circle-o memicon"></i></a></span>
    <span style="float:right;">
        <input type="button" class="memrun" id="memclear" value="Clear Logs">
        <input type="button" class="memnotrun" id="memstop" value="Stop Operation">
        <input type="button" class="memnotrun" id="memkill" value="Kill Operation">
    </span><br>

    <input type="checkbox" id="memnotify" value="memnotify">
    <label for="memnotify" title="Once the operation completes, a notification is sent using Unraid's general notification settings with the result of the operation." class="memtip">Notification on Operation Complete</label> 
    <span style="float:right;margin-right:10px;"><strong>This program cannot test all of your memory at once, it is therefore not a full replacement for extensive <a href="https://www.memtest86.com/download.htm" target="_blank">MemTest86</a> testing.</strong></span>
    <br>
    <input type="checkbox" id="memerrs" value="memerrs" checked>
    <label for="memerrs" title="Beware that recording many thousands of errors can result in multiple GB logfiles and exceed the available RAM. There are safeguards in place so that the system will not crash even in such a case, but it is possible that no further log output can be written once that memory is exhausted." class="memtip">Write Detailed Error Output (<strong>Read Warning</strong>)</label>   
    <span style="float:right;margin-right:10px;">It can however identify memory problems in situations where a restart is not (immediately) possible or stress test your RAM.</span>
    <br>
    <span style="float:right;margin-right:10px;">When selecting the amount of memory to test, <u>please consider leaving some memory for the operating system to function.</u></span>
</form>

<script type="text/javascript">
function getRegularMemLogs() {
    $.get('/plugins/dwmemtester/include/dwmemtester_log.php', {"type": "regular"}, function(data) {
        if (data) { 
            $('#memlogviewer').html(data); 
	        var pre = $(".memlog");
	        pre.scrollTop(pre.prop("scrollHeight"));
	    }
    });
    clearTimeout(timers.getRegularMemLogs);
    timers.getRegularMemLogs = setTimeout(getRegularMemLogs, 1000);
}
function getErrorMemLogs() {
    $.get('/plugins/dwmemtester/include/dwmemtester_log.php', {"type": "errors"}, function(data) {
        if (data) { 
            $('#memerrlogviewer').html(data); 
	        var pre = $(".memerrlog");
	        pre.scrollTop(pre.prop("scrollHeight"));
	    }
    });
    clearTimeout(timers.getErrorMemLogs);
    timers.getErrorMemLogs = setTimeout(getErrorMemLogs, 1000);
}
function getMemStatus() {
    $.get('/plugins/dwmemtester/include/dwmemtester_status.php', {"getfs": "yes"}, function(data) {
        if (data) {
            var splitData = data.split(",");
            if(splitData[0]) {
                if(splitData[0] === "RUNNING:YES") {
                    $('#memstatusicon').show();
                    $('.memrun').prop('disabled', true);
                    $('.memnotrun').prop('disabled', false);
                } else if (splitData[0] === "RUNNING:NO") {
                    if($('#memstatusicon').is(":visible")) {
                        location = '/Settings/dwmemtesterOps';
                    }
                    $('#memstatusicon').hide();
                    $('.memrun').prop('disabled', false);
                    $('.memnotrun').prop('disabled', true);
                    $('#memlogcontrol').attr("class", "fa fa-refresh");
                    clearTimeout(timers.getRegularMemLogs);
                    clearTimeout(timers.getErrorMemLogs);
                }
            }
            if(splitData[1]) {
                if(splitData[1] === "YES") {
                    $('.memramwarning').show();
                    $('.memramtip').tooltipster({
                        maxWidth: 300
                    });
                } else if (splitData[1] === "NO") {
                    $('.memramwarning').hide();
                }
            }
            if(splitData[2]) {
                $('#memsumsize').html(splitData[2]);
            }
            if(splitData[3]) {
                $('#memerrsize').html(splitData[3]);
            }
	    }
    });
    clearTimeout(timers.getMemStatus);
    timers.getMemStatus = setTimeout(getMemStatus, 3000);
}
function toggleMemLogs() {
    if($('#memlogcontrol').attr("class") == "fa fa-refresh fa-spin") {
        $('#memlogcontrol').attr("class", "fa fa-refresh");
        clearTimeout(timers.getRegularMemLogs);
        clearTimeout(timers.getErrorMemLogs);
    } else {
        $('#memlogcontrol').attr("class", "fa fa-refresh fa-spin");
        getRegularMemLogs();
        getErrorMemLogs();
    }
}
$(function()
{
    $('#memstart').click(function(){
        if($('#memsize').val()) {
            var displayMemSize = $('#memsize').val();
            var displayMemTest = /[BKMG]/;
            if(!displayMemTest.test(displayMemSize)) { displayMemSize = displayMemSize + "M"; }
            swal({
                title: "Ready for Testing",
                text: "<span style='font-weight:bold'>Selected Memory: " + displayMemSize + "</span><br><br>The memory testing is about to start, you may notice your system slow down during the testing process. Please make sure you have not selected all available memory and have left a bit of memory for the system to still function while the memory testing is in progress.<br><br><span style='font-weight:bold;color:red;'>When testing memory, it is always recommended to stop any arrays/pools first to avoid problems due to found RAM errors or starvation.</span>",
                type: "info",
                showCancelButton: true,
                confirmButtonText: "Start Testing",
                html: true
                },
                function(){
                    $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/start');
                    if($('#memerrs').is(':checked')) {
                        $('#arg1').val('1');
                    }
                    if($('#memnotify').is(':checked')) {
                        $('#arg2').val('1');
                    }    
                    if($('#memhex').val()) {
                        $('#arg3').val('-p');
                        $('#arg4').val($('#memhex').val());
                    }
                    if($('#memtarget').val()) {
                        $('#arg5').val('-d');
                        $('#arg6').val($('#memtarget').val());
                    }
                    $('#memcommands').submit();
                });
        } else {
            swal("Operation Failure", "You need to select an amount of memory to test.", "error");
        }
    });
    $('#memclear').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/clear');
        $('#memcommands').submit();
    });
    $('#memstop').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/stop');
        $('#memcommands').submit();
    });
    $('#memkill').click(function(){
        $('#memcommand').val('/usr/local/emhttp/plugins/dwmemtester/scripts/kill');
        $('#memcommands').submit();
    });
    $('#memlogcontrol').click(toggleMemLogs);
    $('.memtip').tooltipster({
        maxWidth: 300
    });
    getMemStatus()
    getRegularMemLogs();
    getErrorMemLogs();
    showStatus('memtester');

    if ($.cookie('dwmemwarning')===undefined) {
        swal({
            title: "Plugin Disclaimer",
            text: "Be advised that running memory tests on a live system has risks and can cause system instabilities due to found RAM errors or starvation.<br><br>Please do make yourself familiar with the <a href='https://linux.die.net/man/8/memtester' target='_blank'>User Manual</a> and ideally stop any of the running arrays/pools before the testing at your own risk.",
            type: "warning",
            confirmButtonText: "Proceed",
            showCancelButton: true,
            cancelButtonText: "Go Back",
            html: true
            },
            function(isConfirmed){
                if(isConfirmed) {
                    $.cookie('dwmemwarning', 'seen', { expires: 1 });
                } else {
                    location = '/Settings';
                }
            });
    }
});
</script>
